# -*- coding: utf-8 -*-
import dateparser
import sys
import io
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

import telebot
import requests
import re

TELEGRAM_TOKEN = '7992462078:AAGJ46crBdOMSAuIfWncFd0AEjrDiT4Tnww'
BITRIX_WEBHOOK = 'https://meetride.bitrix24.ru/rest/9/oo1pdplpuoy0q9ur/crm.deal.add.json'

bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ú–∞–ø–ø–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ID –∏–∑ Bitrix24
# –°–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª—é UF_CRM_1751271728682 –∏–∑ deal (1).csv
CAR_CLASS_MAPPING = {
    '–∫–æ–º—Ñ–æ—Ä—Ç': 93,          # –ö–æ–º—Ñ–æ—Ä—Ç! Jolion, X-Cite, –æ–ø—Ç–∏–º–∞ –∏ –≤—ã—à–µ
    '–∫–æ–º—Ñ–æ—Ä—Ç!': 93,
    '–∫–æ–º—Ñ–æ—Ä—Ç +': 95,        # –ö–æ–º—Ñ–æ—Ä—Ç +! –ö–ª–∞—Å—Å D, Camry, optima, k5 –∏ –ø–æ–¥–æ–±–Ω—ã–µ –æ—Ç 2018–≥–≤
    '–∫–æ–º—Ñ–æ—Ä—Ç+': 95,
    '–º–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å': 97,     # –ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å! Mercedes sprinter, pegout boxer –∏ –ø–æ–¥–æ–±–Ω—ã–µ
    '–º–∏–Ω–∏–≤—ç–Ω': 99,          # –ú–∏–Ω–∏–≤—ç–Ω! Hyundai Starex –∏ –ø–æ–¥–æ–±–Ω—ã–µ –¥–æ 8–º–∏ –º–µ—Å—Ç
    '–º–∏–Ω–∏–≤–µ–Ω': 99,
    '–º–∏–Ω–∏–≤—ç–Ω vip': 101,     # –ú–∏–Ω–∏–≤—ç–Ω VIP! Mercedes V-class, hyundai staria –∏ –ø–æ–¥–æ–±–Ω—ã–µ
    '–º–∏–Ω–∏–≤–µ–Ω vip': 101,
    '–∞–≤—Ç–æ–±—É—Å': 103,         # –ê–≤—Ç–æ–±—É—Å! –Æ—Ç–æ–Ω–≥ –∏ –ø–æ–¥–æ–±–Ω—ã–µ –¥–æ 55 –º–µ—Å—Ç
    '–±–∏–∑–Ω–µ—Å': 105,          # –ë–∏–∑–Ω–µ—Å! BMW 5, MERCEDES E-CLASS –ò –ü–û–î–û–ë–ù–´–ï –û–¢ 2018 –ì–í
    '–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å–∫–∏–π': 107, # –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å–∫–∏–π! Mercedes s-class, Mercedes Maybach, BMW 7 –∏ –ø–æ–¥–æ–±–Ω—ã–µ
    '–∫—Ä–æ—Å—Å–æ–≤–µ—Ä': 109,       # –ö—Ä–æ—Å—Å–æ–≤–µ—Ä! Jolion, Geely Atlas Pro, –∏ –ø–æ–¥–æ–±–Ω—ã–µ
    '–∫—Ä–æ—Å—Å–æ–≤–µ—Ä!': 109,
    '–¥–∂–∏–ø': 111,            # –î–∂–∏–ø! Land Cruser, BMW x 5 –∏ –ø–æ–¥–æ–±–Ω—ã–µ
    '–¥–∂–∏–ø!': 111,
    '–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫': 113,     # –í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫! –£–∞–∑ –ø–∞—Ç—Ä–∏–æ—Ç –∏ –ø–æ–¥–æ–±–Ω—ã–µ
    '–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫!': 113,
    '—É—Å–ª—É–≥–∞ —Ç—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å': 115, # –£—Å–ª—É–≥–∞ –¢–†–ï–ó–í–´–ô –í–û–î–ò–¢–ï–õ–¨
    '—Ç—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å': 115,
    '–¥–æ—Å—Ç–∞–≤–∫–∞': 117         # –î–æ—Å—Ç–∞–≤–∫–∞
}

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ç–µ–ø–µ—Ä—å –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ Bitrix24


def parse_message(message):
    data = {}

    # –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞)
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å —ç–º–æ–¥–∑–∏, –ø–æ—Ç–æ–º –±–µ–∑ —ç–º–æ–¥–∑–∏
    match = re.search(r'#Ô∏è‚É£\s*(.+?)(?=\n|$)', message)
    if not match:
        # –ï—Å–ª–∏ —Å —ç–º–æ–¥–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω PT-xxx –∏–ª–∏ –†–¢-xxx (–º–∏–Ω–∏–º—É–º 4 —Ü–∏—Ñ—Ä—ã) –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏
        match = re.search(r'(?:^|\n)\s*([A-Z–ê-–Ø]{2}-\d{4,})', message)
    
    if match:
        order_number = match.group(1).strip()
        data['TITLE'] = '–ó–∞—è–≤–∫–∞: {}'.format(order_number)
    else:
        data['TITLE'] = '–ó–∞—è–≤–∫–∞ –±–µ–∑ –Ω–æ–º–µ—Ä–∞'

    # –ö–ª–∞—Å—Å –∞–≤—Ç–æ
    match = re.search(r'üöó\s*(.+)', message)
    car_class_text = match.group(1).strip() if match else ''
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è - –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º ID –≤ –º–∞–ø–ø–∏–Ω–≥–µ
    if car_class_text:
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
        car_class_lower = car_class_text.lower().strip()
        
        # –ò—â–µ–º ID –≤ –º–∞–ø–ø–∏–Ω–≥–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º None
        data['CAR_CLASS'] = CAR_CLASS_MAPPING.get(car_class_lower, None)
    else:
        data['CAR_CLASS'] = None

    # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    match = re.search(r'üìÜ\s*(.+)', message)
    raw_date = match.group(1).strip() if match else ''
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏ –≤ –≤—Ä–µ–º–µ–Ω–∏
    if raw_date:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫–∏ –≤–∏–¥–∞ "05:301" -> "05:30"
        raw_date = re.sub(r'(\d{2}:\d{2})\d+', r'\1', raw_date)
        
    parsed_date = dateparser.parse(raw_date)
    data['WHEN'] = parsed_date.strftime('%Y-%m-%d %H:%M:%S') if parsed_date else ''


    # –û—Ç–∫—É–¥–∞
    match = re.search(r'üÖ∞Ô∏è\s*(.+)', message)
    data['FROM'] = match.group(1).strip() if match else ''

    # –ö—É–¥–∞
    match = re.search(r'üÖ±Ô∏è\s*(.+)', message)
    data['TO'] = match.group(1).strip() if match else ''

    # –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞
    match = re.search(r'(‚úàÔ∏è|üöÜ/‚úàÔ∏è)\s*(.+)', message)
    data['FLIGHT'] = match.group(2).strip() if match else ''

    # –ü–∞—Å—Å–∞–∂–∏—Ä
    matches = re.findall(r'üë•\s*(.+)', message)
    data['PASSENGER'] = matches if matches else []

    # –î–æ–ø —É—Å–ª–æ–≤–∏—è
    match = re.search(r'‚ÑπÔ∏è\s*(.+)', message)
    data['CONDITIONS'] = match.group(1).strip() if match else ''

    # –°—Ç–æ–∏–º–æ—Å—Ç—å
    # –°—Ç–æ–∏–º–æ—Å—Ç—å
    match = re.search(r'üí∞\s*(\d+)[^\d]+(\d+)', message)
    if match:
        data['PRICE_CLIENT'] = int(match.group(1))
        data['PRICE_DRIVER'] = int(match.group(2))
        data['PRICE_COMBINED'] = "{}/{}".format(match.group(1), match.group(2))
    else:
        data['PRICE_CLIENT'] = None
        data['PRICE_DRIVER'] = None
        data['PRICE_COMBINED'] = ''


    return data

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    parsed = parse_message(message.text)

    fields = {
        'fields': {
            'TITLE': parsed['TITLE'],
            'UF_CRM_1751269147414': parsed['FROM'],
            'UF_CRM_1751269175432': parsed['TO'],
            'UF_CRM_1751269222959': parsed['WHEN'],
            'UF_CRM_1751271728682': parsed['CAR_CLASS'],
            'UF_CRM_1751271774391': parsed['FLIGHT'],
            'UF_CRM_1751271798896': parsed['PASSENGER'],
            'UF_CRM_1751269256380': parsed['CONDITIONS'],
            'UF_CRM_1754381402': parsed['PRICE_COMBINED'],        # —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±—â–µ–≥–æ –≤–∏–¥–∞ 4500/3700
            'UF_CRM_1751271841129': parsed['PRICE_CLIENT'],       # –°—É–º–º–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            'UF_CRM_1751271862251': parsed['PRICE_DRIVER'],       # –°—É–º–º–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
            'CATEGORY_ID': 0,
            'STAGE_ID': 'NEW'
        }
    }

    print("üß∑ –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî URL –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:")
    print(BITRIX_WEBHOOK)
    response = requests.post(BITRIX_WEBHOOK, json=fields)
    print("üîó URL –∑–∞–ø—Ä–æ—Å–∞:")
    print(BITRIX_WEBHOOK)
    print("üì¶ –î–∞–Ω–Ω—ã–µ fields:")
    print(fields)
    print("üì° –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å:")
    print(response.url)
    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ë–∏—Ç—Ä–∏–∫—Å24:")
    print(fields)

    print("üì• –û—Ç–≤–µ—Ç –æ—Ç Bitrix:")
    print(response.status_code)
    print(response.text)

    if response.status_code == 200 and 'result' in response.json():
        bot.send_message(message.chat.id, "‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:\n{}".format(response.text))

    #bot.send_message(message.chat.id, f"üì• –û—Ç–≤–µ—Ç –æ—Ç –ë–∏—Ç—Ä–∏–∫—Å24:\n{response.text}")

bot.polling(none_stop=True, interval=0, timeout=30)

